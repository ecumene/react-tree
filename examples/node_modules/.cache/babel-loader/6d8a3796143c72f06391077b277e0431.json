{"ast":null,"code":"const reduce = (getChildren, value, shouldFlattenCallback = node => node.children.length) => {\n  return getChildren(node).reduce((accumulator, value) => {\n    accumulator.push(value);\n\n    if (shouldFlattenCallback(value)) {\n      accumulator = accumulator.concat(reduce(getChildren, shouldFlattenCallback)(accumulator, value));\n    }\n\n    return accumulator;\n  });\n};\n\nexport default ((source, {\n  getChildren = node => node.children,\n  shouldFlattenCallback: any\n}) => {\n  const flattened = reduce(getChildren)();\n  return {\n    flattened\n  };\n});","map":{"version":3,"sources":["/home/mitch/react-tree/src/hooks/useTree.ts"],"names":["reduce","getChildren","value","shouldFlattenCallback","node","children","length","accumulator","push","concat","source","any","flattened"],"mappings":"AASA,MAAMA,MAAM,GAAG,CACbC,WADa,EAEbC,KAFa,EAGbC,qBAA0B,GAAIC,IAAD,IAAeA,IAAI,CAACC,QAAL,CAAcC,MAH7C,KAIV;AACH,SAAOL,WAAW,CAACG,IAAD,CAAX,CAAkBJ,MAAlB,CAAyB,CAACO,WAAD,EAAmBL,KAAnB,KAAwC;AACxEK,IAAAA,WAAW,CAACC,IAAZ,CAAiBN,KAAjB;;AACA,QAAIC,qBAAqB,CAACD,KAAD,CAAzB,EAAkC;AAChCK,MAAAA,WAAW,GAAGA,WAAW,CAACE,MAAZ,CACZT,MAAM,CAACC,WAAD,EAAcE,qBAAd,CAAN,CAA2CI,WAA3C,EAAwDL,KAAxD,CADY,CAAd;AAGD;;AACD,WAAOK,WAAP;AAAoB,GAPb,CAAP;AAQD,CAbD;;AAeA,gBAAe,CACbG,MADa,EAEb;AAAET,EAAAA,WAAW,GAAIG,IAAD,IAAUA,IAAI,CAACC,QAA/B;AAAyCF,EAAAA,qBAAqB,EAAEQ;AAAhE,CAFa,KAGA;AACb,QAAMC,SAAS,GAAGZ,MAAM,CAACC,WAAD,CAAN,EAAlB;AACA,SAAO;AAAEW,IAAAA;AAAF,GAAP;AACD,CAND","sourcesContent":["interface TreeConfig {\n  getChildren?: (node: any) => any[];\n  shouldFlattenCallback?: (node: any) => boolean;\n}\n\ninterface TreeArgs {\n  flattened: any[];\n}\n\nconst reduce = (\n  getChildren: any,\n  value: any,\n  shouldFlattenCallback: any = (node: any) => node.children.length\n) => {\n  return getChildren(node).reduce((accumulator: any, value: any): any[] =>{\n  accumulator.push(value);\n  if (shouldFlattenCallback(value)) {\n    accumulator = accumulator.concat(\n      reduce(getChildren, shouldFlattenCallback)(accumulator, value)\n    );\n  }\n  return accumulator;});\n};\n\nexport default (\n  source: any,\n  { getChildren = (node) => node.children, shouldFlattenCallback: any }: TreeConfig\n): TreeArgs => {\n  const flattened = reduce(getChildren)();\n  return { flattened };\n};\n"]},"metadata":{},"sourceType":"module"}