{"ast":null,"code":"const flat = (getChildren, callback) => (accumulator, currentValue) => {\n  const children = getChildren(currentValue);\n  console.log(children);\n\n  if (!(callback && callback(currentValue))) {\n    return children.reduce(flat(getChildren, callback), accumulator);\n  }\n\n  accumulator.push(children);\n  return accumulator;\n};\n\nexport default ((source, {\n  getChildren = node => node['children'],\n  shouldFlattenCallback\n}) => {\n  const flattened = getChildren(source).reduce(flat(getChildren, shouldFlattenCallback), []);\n  return {\n    flattened\n  };\n});","map":{"version":3,"sources":["/home/mitch/react-tree/src/hooks/useTree.ts"],"names":["flat","getChildren","callback","accumulator","currentValue","children","console","log","reduce","push","source","node","shouldFlattenCallback","flattened"],"mappings":"AASA,MAAMA,IAAI,GAAG,CACXC,WADW,EAEXC,QAFW,KAGR,CAACC,WAAD,EAAqBC,YAArB,KAAkD;AACrD,QAAMC,QAAQ,GAAGJ,WAAW,CAACG,YAAD,CAA5B;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AACA,MAAI,EAAEH,QAAQ,IAAIA,QAAQ,CAACE,YAAD,CAAtB,CAAJ,EAA2C;AACzC,WAAOC,QAAQ,CAACG,MAAT,CAAgBR,IAAI,CAACC,WAAD,EAAcC,QAAd,CAApB,EAA6CC,WAA7C,CAAP;AACD;;AACDA,EAAAA,WAAW,CAACM,IAAZ,CAAiBJ,QAAjB;AACA,SAAOF,WAAP;AACD,CAXD;;AAaA,gBAAe,CACbO,MADa,EAEb;AACET,EAAAA,WAAW,GAAIU,IAAD,IAAUA,IAAI,CAAC,UAAD,CAD9B;AAEEC,EAAAA;AAFF,CAFa,KAMA;AACb,QAAMC,SAAS,GAAGZ,WAAW,CAACS,MAAD,CAAX,CAAoBF,MAApB,CAChBR,IAAI,CAACC,WAAD,EAAcW,qBAAd,CADY,EAEhB,EAFgB,CAAlB;AAIA,SAAO;AAAEC,IAAAA;AAAF,GAAP;AACD,CAZD","sourcesContent":["interface TreeConfig {\n  getChildren?: (node: any) => [any];\n  shouldFlattenCallback?: (node: any) => boolean;\n}\n\ninterface TreeArgs {\n  flattened: [any];\n}\n\nconst flat = (\n  getChildren: (node: any) => [any],\n  callback?: (value: any) => boolean\n) => (accumulator: [any], currentValue: any): [any] => {\n  const children = getChildren(currentValue);\n  console.log(children)\n  if (!(callback && callback(currentValue))) {\n    return children.reduce(flat(getChildren, callback), accumulator);\n  }\n  accumulator.push(children);\n  return accumulator;\n};\n\nexport default (\n  source: any,\n  {\n    getChildren = (node) => node['children'],\n    shouldFlattenCallback,\n  }: TreeConfig\n): TreeArgs => {\n  const flattened = getChildren(source).reduce(\n    flat(getChildren, shouldFlattenCallback),\n    []\n  );\n  return { flattened };\n};\n"]},"metadata":{},"sourceType":"module"}