{"ast":null,"code":"import { useMemo, useCallback } from 'react';\nexport default ((source, {\n  getId = node => node.id,\n  getChildren = node => node.children,\n  shouldFlattenCallback = node => node.children.length\n} = {}) => {\n  if (!getChildren(source)) {\n    throw new Error('built-in getChildren returns falsy, please specify a correct getChildren');\n  }\n\n  if (!getId(source)) {\n    throw new Error('built-in getId returns falsy, please specify a correct getId');\n  }\n\n  let depth = 0;\n  const toFinalNode = useCallback(({\n    value,\n    depth = 0,\n    id = getId(value),\n    parent = null,\n    source\n  } = {}) => {\n    return {\n      id,\n      depth,\n      parent,\n      value,\n      source\n    };\n  }, [getId]);\n  const reduce = useCallback((getChildren, node) => {\n    depth++;\n    return getChildren(node).reduce((accumulator, value) => {\n      accumulator.push(toFinalNode({\n        value,\n        depth,\n        parent: node\n      }));\n\n      if (shouldFlattenCallback(value)) {\n        accumulator = accumulator.concat(reduce(getChildren, value));\n      }\n\n      return accumulator;\n    }, []);\n  }, [depth, shouldFlattenCallback, toFinalNode]);\n  const flattened = useMemo(() => [toFinalNode({\n    value: source\n  }), ...reduce(getChildren, source)], [getChildren, reduce, source, toFinalNode]);\n  return flattened;\n});","map":{"version":3,"sources":["/home/mitch/react-tree/src/hooks/useTree.ts"],"names":["useMemo","useCallback","source","getId","node","id","getChildren","children","shouldFlattenCallback","length","Error","depth","toFinalNode","value","parent","reduce","accumulator","push","concat","flattened"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,WAAlB,QAAqC,OAArC;AAgBA,gBAAe,CACbC,MADa,EAEb;AACEC,EAAAA,KAAK,GAAIC,IAAD,IAAUA,IAAI,CAACC,EADzB;AAEEC,EAAAA,WAAW,GAAIF,IAAD,IAAUA,IAAI,CAACG,QAF/B;AAGEC,EAAAA,qBAAqB,GAAIJ,IAAD,IAAeA,IAAI,CAACG,QAAL,CAAcE;AAHvD,IAIgB,EANH,KAOH;AACV,MAAI,CAACH,WAAW,CAACJ,MAAD,CAAhB,EAA0B;AACxB,UAAM,IAAIQ,KAAJ,CACJ,0EADI,CAAN;AAGD;;AAED,MAAI,CAACP,KAAK,CAACD,MAAD,CAAV,EAAoB;AAClB,UAAM,IAAIQ,KAAJ,CACJ,8DADI,CAAN;AAGD;;AAED,MAAIC,KAAK,GAAG,CAAZ;AAEA,QAAMC,WAAW,GAAGX,WAAW,CAC7B,CAAC;AACCY,IAAAA,KADD;AAECF,IAAAA,KAAK,GAAG,CAFT;AAGCN,IAAAA,EAAE,GAAGF,KAAK,CAACU,KAAD,CAHX;AAICC,IAAAA,MAAM,GAAG,IAJV;AAKCZ,IAAAA;AALD,MAMa,EANd,KAM+B;AAC7B,WAAO;AAAEG,MAAAA,EAAF;AAAMM,MAAAA,KAAN;AAAaG,MAAAA,MAAb;AAAqBD,MAAAA,KAArB;AAA4BX,MAAAA;AAA5B,KAAP;AACD,GAT4B,EAU7B,CAACC,KAAD,CAV6B,CAA/B;AAaA,QAAMY,MAAM,GAAGd,WAAW,CACxB,CAACK,WAAD,EAAmBF,IAAnB,KAAiC;AAC/BO,IAAAA,KAAK;AACL,WAAOL,WAAW,CAACF,IAAD,CAAX,CAAkBW,MAAlB,CAAyB,CAACC,WAAD,EAAmBH,KAAnB,KAAyC;AACvEG,MAAAA,WAAW,CAACC,IAAZ,CAAiBL,WAAW,CAAC;AAAEC,QAAAA,KAAF;AAASF,QAAAA,KAAT;AAAgBG,QAAAA,MAAM,EAAEV;AAAxB,OAAD,CAA5B;;AACA,UAAII,qBAAqB,CAACK,KAAD,CAAzB,EAAkC;AAChCG,QAAAA,WAAW,GAAGA,WAAW,CAACE,MAAZ,CAAmBH,MAAM,CAACT,WAAD,EAAcO,KAAd,CAAzB,CAAd;AACD;;AACD,aAAOG,WAAP;AACD,KANM,EAMJ,EANI,CAAP;AAOD,GAVuB,EAWxB,CAACL,KAAD,EAAQH,qBAAR,EAA+BI,WAA/B,CAXwB,CAA1B;AAcA,QAAMO,SAAS,GAAGnB,OAAO,CACvB,MAAM,CAACY,WAAW,CAAC;AAAEC,IAAAA,KAAK,EAAEX;AAAT,GAAD,CAAZ,EAAiC,GAAGa,MAAM,CAACT,WAAD,EAAcJ,MAAd,CAA1C,CADiB,EAEvB,CAACI,WAAD,EAAcS,MAAd,EAAsBb,MAAtB,EAA8BU,WAA9B,CAFuB,CAAzB;AAKA,SAAOO,SAAP;AACD,CAvDD","sourcesContent":["import { useMemo, useCallback } from 'react';\n\ninterface TreeConfig {\n  getId?: (node: any) => any;\n  getChildren?: (node: any) => any[];\n  shouldFlattenCallback?: (node: any) => boolean;\n}\n\ninterface TreeNode {\n  id?: any;\n  value?: any;\n  depth?: number;\n  parent?: any;\n  source?: any;\n}\n\nexport default (\n  source: any,\n  {\n    getId = (node) => node.id,\n    getChildren = (node) => node.children,\n    shouldFlattenCallback = (node: any) => node.children.length,\n  }: TreeConfig = {}\n): any[] => {\n  if (!getChildren(source)) {\n    throw new Error(\n      'built-in getChildren returns falsy, please specify a correct getChildren'\n    );\n  }\n\n  if (!getId(source)) {\n    throw new Error(\n      'built-in getId returns falsy, please specify a correct getId'\n    );\n  }\n\n  let depth = 0;\n\n  const toFinalNode = useCallback(\n    ({\n      value,\n      depth = 0,\n      id = getId(value),\n      parent = null,\n      source,\n    }: TreeNode = {}): TreeNode => {\n      return { id, depth, parent, value, source };\n    },\n    [getId]\n  );\n\n  const reduce = useCallback(\n    (getChildren: any, node: any) => {\n      depth++;\n      return getChildren(node).reduce((accumulator: any, value: any): any[] => {\n        accumulator.push(toFinalNode({ value, depth, parent: node }));\n        if (shouldFlattenCallback(value)) {\n          accumulator = accumulator.concat(reduce(getChildren, value));\n        }\n        return accumulator;\n      }, []);\n    },\n    [depth, shouldFlattenCallback, toFinalNode]\n  );\n\n  const flattened = useMemo(\n    () => [toFinalNode({ value: source }), ...reduce(getChildren, source)],\n    [getChildren, reduce, source, toFinalNode]\n  );\n\n  return flattened;\n};\n"]},"metadata":{},"sourceType":"module"}