{"ast":null,"code":"const reduce = (getChildren, node, shouldFlattenCallback = node => node.children.length) => {\n  return getChildren(node).reduce((accumulator, value) => {\n    accumulator.push(value);\n\n    if (shouldFlattenCallback(value)) {\n      accumulator = accumulator.concat(reduce(getChildren, shouldFlattenCallback));\n    }\n\n    return accumulator;\n  }, []);\n};\n\nexport default ((source, {\n  getChildren = node => node.children,\n  shouldFlattenCallback: any\n}) => {\n  const flattened = reduce(getChildren, source);\n  return {\n    flattened\n  };\n});","map":{"version":3,"sources":["/home/mitch/react-tree/src/hooks/useTree.ts"],"names":["reduce","getChildren","node","shouldFlattenCallback","children","length","accumulator","value","push","concat","source","any","flattened"],"mappings":"AASA,MAAMA,MAAM,GAAG,CACbC,WADa,EAEbC,IAFa,EAGbC,qBAA0B,GAAID,IAAD,IAAeA,IAAI,CAACE,QAAL,CAAcC,MAH7C,KAIV;AACH,SAAOJ,WAAW,CAACC,IAAD,CAAX,CAAkBF,MAAlB,CAAyB,CAACM,WAAD,EAAmBC,KAAnB,KAAyC;AACvED,IAAAA,WAAW,CAACE,IAAZ,CAAiBD,KAAjB;;AACA,QAAIJ,qBAAqB,CAACI,KAAD,CAAzB,EAAkC;AAChCD,MAAAA,WAAW,GAAGA,WAAW,CAACG,MAAZ,CACZT,MAAM,CAACC,WAAD,EAAcE,qBAAd,CADM,CAAd;AAGD;;AACD,WAAOG,WAAP;AACD,GARM,EAQJ,EARI,CAAP;AASD,CAdD;;AAgBA,gBAAe,CACbI,MADa,EAEb;AACET,EAAAA,WAAW,GAAIC,IAAD,IAAUA,IAAI,CAACE,QAD/B;AAEED,EAAAA,qBAAqB,EAAEQ;AAFzB,CAFa,KAMA;AACb,QAAMC,SAAS,GAAGZ,MAAM,CAACC,WAAD,EAAcS,MAAd,CAAxB;AACA,SAAO;AAAEE,IAAAA;AAAF,GAAP;AACD,CATD","sourcesContent":["interface TreeConfig {\n  getChildren?: (node: any) => any[];\n  shouldFlattenCallback?: (node: any) => boolean;\n}\n\ninterface TreeArgs {\n  flattened: any[];\n}\n\nconst reduce = (\n  getChildren: any,\n  node: any,\n  shouldFlattenCallback: any = (node: any) => node.children.length\n) => {\n  return getChildren(node).reduce((accumulator: any, value: any): any[] => {\n    accumulator.push(value);\n    if (shouldFlattenCallback(value)) {\n      accumulator = accumulator.concat(\n        reduce(getChildren, shouldFlattenCallback)\n      );\n    }\n    return accumulator;\n  }, []);\n};\n\nexport default (\n  source: any,\n  {\n    getChildren = (node) => node.children,\n    shouldFlattenCallback: any,\n  }: TreeConfig\n): TreeArgs => {\n  const flattened = reduce(getChildren, source);\n  return { flattened };\n};\n"]},"metadata":{},"sourceType":"module"}