{"ast":null,"code":"const reduce = (getChildren, shouldFlattenCallback = node => node.children.length) => (reducerFn, init, node) => {\n  const acc = reducerFn(init, node);\n\n  if (!shouldFlattenCallback) {\n    return acc;\n  }\n\n  console.log(getChildren(node));\n  return getChildren(init).reduce(reduce(reducerFn, null), acc);\n};\n\nexport default ((source, {\n  getChildren = node => node.children,\n  shouldFlattenCallback\n}) => {\n  console.log(source.children);\n  const flattened = reduce(getChildren, shouldFlattenCallback)(function () {\n    console.log(arguments);\n  }, source, []);\n  return {\n    flattened\n  };\n});","map":{"version":3,"sources":["/home/mitch/react-tree/src/hooks/useTree.ts"],"names":["reduce","getChildren","shouldFlattenCallback","node","children","length","reducerFn","init","acc","console","log","source","flattened","arguments"],"mappings":"AASA,MAAMA,MAAM,GAAG,CACbC,WADa,EAEbC,qBAA0B,GAAIC,IAAD,IAAeA,IAAI,CAACC,QAAL,CAAcC,MAF7C,KAGV,CAACC,SAAD,EAAiBC,IAAjB,EAA4BJ,IAA5B,KAA0C;AAC7C,QAAMK,GAAG,GAAGF,SAAS,CAACC,IAAD,EAAOJ,IAAP,CAArB;;AACA,MAAI,CAACD,qBAAL,EAA4B;AAC1B,WAAOM,GAAP;AACD;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAYT,WAAW,CAACE,IAAD,CAAvB;AACA,SAAOF,WAAW,CAACM,IAAD,CAAX,CAAkBP,MAAlB,CAAyBA,MAAM,CAACM,SAAD,EAAY,IAAZ,CAA/B,EAAkDE,GAAlD,CAAP;AACD,CAVD;;AAYA,gBAAe,CACbG,MADa,EAEb;AACEV,EAAAA,WAAW,GAAIE,IAAD,IAAUA,IAAI,CAACC,QAD/B;AAEEF,EAAAA;AAFF,CAFa,KAMA;AACbO,EAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACP,QAAnB;AACA,QAAMQ,SAAS,GAAGZ,MAAM,CAACC,WAAD,EAAcC,qBAAd,CAAN,CAChB,YAAY;AACVO,IAAAA,OAAO,CAACC,GAAR,CAAYG,SAAZ;AACD,GAHe,EAIhBF,MAJgB,EAKhB,EALgB,CAAlB;AAQA,SAAO;AAAEC,IAAAA;AAAF,GAAP;AACD,CAjBD","sourcesContent":["interface TreeConfig {\n  getChildren?: (node: any) => any[];\n  shouldFlattenCallback?: (node: any) => boolean;\n}\n\ninterface TreeArgs {\n  flattened: any[];\n}\n\nconst reduce = (\n  getChildren: any,\n  shouldFlattenCallback: any = (node: any) => node.children.length\n) => (reducerFn: any, init: any, node: any) => {\n  const acc = reducerFn(init, node);\n  if (!shouldFlattenCallback) {\n    return acc;\n  }\n  console.log(getChildren(node))\n  return getChildren(init).reduce(reduce(reducerFn, null), acc);\n};\n\nexport default (\n  source: any,\n  {\n    getChildren = (node) => node.children,\n    shouldFlattenCallback,\n  }: TreeConfig\n): TreeArgs => {\n  console.log(source.children)\n  const flattened = reduce(getChildren, shouldFlattenCallback)(\n    function () {\n      console.log(arguments);\n    },\n    source,\n    [],\n  );\n\n  return { flattened };\n};\n"]},"metadata":{},"sourceType":"module"}