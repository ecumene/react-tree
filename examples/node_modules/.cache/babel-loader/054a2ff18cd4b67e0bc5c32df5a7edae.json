{"ast":null,"code":"export default ((source, {\n  getChildren = node => node.children,\n  shouldFlattenCallback: any\n}) => {\n  let depth = 0;\n\n  const reduce = (getChildren, node, shouldFlattenCallback = node => node.children.length) => {\n    depth++;\n    return getChildren(node).reduce((accumulator, value) => {\n      accumulator.push({\n        depth,\n        value\n      });\n\n      if (shouldFlattenCallback(value)) {\n        accumulator = accumulator.concat(reduce(getChildren, value, shouldFlattenCallback));\n      }\n\n      return accumulator;\n    }, []);\n  };\n\n  const flattened = [source, ...reduce(getChildren, source)];\n  return {\n    flattened\n  };\n});","map":{"version":3,"sources":["/home/mitch/react-tree/src/hooks/useTree.ts"],"names":["source","getChildren","node","children","shouldFlattenCallback","any","depth","reduce","length","accumulator","value","push","concat","flattened"],"mappings":"AASA,gBAAe,CACbA,MADa,EAEb;AACEC,EAAAA,WAAW,GAAIC,IAAD,IAAUA,IAAI,CAACC,QAD/B;AAEEC,EAAAA,qBAAqB,EAAEC;AAFzB,CAFa,KAMA;AACb,MAAIC,KAAK,GAAG,CAAZ;;AACA,QAAMC,MAAM,GAAG,CACbN,WADa,EAEbC,IAFa,EAGbE,qBAA0B,GAAIF,IAAD,IAAeA,IAAI,CAACC,QAAL,CAAcK,MAH7C,KAIV;AACHF,IAAAA,KAAK;AACL,WAAOL,WAAW,CAACC,IAAD,CAAX,CAAkBK,MAAlB,CAAyB,CAACE,WAAD,EAAmBC,KAAnB,KAAyC;AACvED,MAAAA,WAAW,CAACE,IAAZ,CAAiB;AAAEL,QAAAA,KAAF;AAASI,QAAAA;AAAT,OAAjB;;AACA,UAAIN,qBAAqB,CAACM,KAAD,CAAzB,EAAkC;AAChCD,QAAAA,WAAW,GAAGA,WAAW,CAACG,MAAZ,CACZL,MAAM,CAACN,WAAD,EAAcS,KAAd,EAAqBN,qBAArB,CADM,CAAd;AAGD;;AACD,aAAOK,WAAP;AACD,KARM,EAQJ,EARI,CAAP;AASD,GAfD;;AAgBA,QAAMI,SAAS,GAAG,CAACb,MAAD,EAAS,GAAGO,MAAM,CAACN,WAAD,EAAcD,MAAd,CAAlB,CAAlB;AACA,SAAO;AAAEa,IAAAA;AAAF,GAAP;AACD,CA1BD","sourcesContent":["interface TreeConfig {\n  getChildren?: (node: any) => any[];\n  shouldFlattenCallback?: (node: any) => boolean;\n}\n\ninterface TreeArgs {\n  flattened: any[];\n}\n\nexport default (\n  source: any,\n  {\n    getChildren = (node) => node.children,\n    shouldFlattenCallback: any,\n  }: TreeConfig\n): TreeArgs => {\n  let depth = 0;\n  const reduce = (\n    getChildren: any,\n    node: any,\n    shouldFlattenCallback: any = (node: any) => node.children.length\n  ) => {\n    depth++;\n    return getChildren(node).reduce((accumulator: any, value: any): any[] => {\n      accumulator.push({ depth, value });\n      if (shouldFlattenCallback(value)) {\n        accumulator = accumulator.concat(\n          reduce(getChildren, value, shouldFlattenCallback)\n        );\n      }\n      return accumulator;\n    }, []);\n  };\n  const flattened = [source, ...reduce(getChildren, source)];\n  return { flattened };\n};\n"]},"metadata":{},"sourceType":"module"}