{"ast":null,"code":"export default ((source, {\n  getId = node => node.id,\n  getChildren = node => node.children,\n  shouldFlattenCallback = node => node.children.length\n}) => {\n  let depth = 0;\n\n  const toFinalNode = (value, {\n    depth = 0,\n    id = getId(value),\n    parent = null\n  } = {}) => {\n    return {\n      id,\n      depth,\n      parent,\n      value\n    };\n  };\n\n  const reduce = (getChildren, node) => {\n    depth++;\n    return getChildren(node).reduce((accumulator, value) => {\n      accumulator.push(toFinalNode(value, {\n        depth,\n        parent: node\n      }));\n\n      if (shouldFlattenCallback(value)) {\n        accumulator = accumulator.concat(reduce(getChildren, value));\n      }\n\n      return accumulator;\n    }, []);\n  };\n\n  const flattened = [toFinalNode(source), ...reduce(getChildren, source)];\n  return {\n    flattened\n  };\n});","map":{"version":3,"sources":["/home/mitch/react-tree/src/hooks/useTree.ts"],"names":["source","getId","node","id","getChildren","children","shouldFlattenCallback","length","depth","toFinalNode","value","parent","reduce","accumulator","push","concat","flattened"],"mappings":"AAgBA,gBAAe,CACbA,MADa,EAEb;AACEC,EAAAA,KAAK,GAAIC,IAAD,IAAUA,IAAI,CAACC,EADzB;AAEEC,EAAAA,WAAW,GAAIF,IAAD,IAAUA,IAAI,CAACG,QAF/B;AAGEC,EAAAA,qBAAqB,GAAIJ,IAAD,IAAeA,IAAI,CAACG,QAAL,CAAcE;AAHvD,CAFa,KAOA;AACb,MAAIC,KAAK,GAAG,CAAZ;;AAEA,QAAMC,WAAW,GAAG,CAClBC,KADkB,EAElB;AAAEF,IAAAA,KAAK,GAAG,CAAV;AAAaL,IAAAA,EAAE,GAAGF,KAAK,CAACS,KAAD,CAAvB;AAAgCC,IAAAA,MAAM,GAAG;AAAzC,MAA4D,EAF1C,KAGf;AACH,WAAO;AAAER,MAAAA,EAAF;AAAMK,MAAAA,KAAN;AAAaG,MAAAA,MAAb;AAAqBD,MAAAA;AAArB,KAAP;AACD,GALD;;AAOA,QAAME,MAAM,GAAG,CAACR,WAAD,EAAmBF,IAAnB,KAAiC;AAC9CM,IAAAA,KAAK;AACL,WAAOJ,WAAW,CAACF,IAAD,CAAX,CAAkBU,MAAlB,CAAyB,CAACC,WAAD,EAAmBH,KAAnB,KAAyC;AACvEG,MAAAA,WAAW,CAACC,IAAZ,CAAiBL,WAAW,CAACC,KAAD,EAAQ;AAAEF,QAAAA,KAAF;AAASG,QAAAA,MAAM,EAAET;AAAjB,OAAR,CAA5B;;AACA,UAAII,qBAAqB,CAACI,KAAD,CAAzB,EAAkC;AAChCG,QAAAA,WAAW,GAAGA,WAAW,CAACE,MAAZ,CAAmBH,MAAM,CAACR,WAAD,EAAcM,KAAd,CAAzB,CAAd;AACD;;AACD,aAAOG,WAAP;AACD,KANM,EAMJ,EANI,CAAP;AAOD,GATD;;AAWA,QAAMG,SAAS,GAAG,CAChBP,WAAW,CAACT,MAAD,CADK,EAEhB,GAAGY,MAAM,CAACR,WAAD,EAAcJ,MAAd,CAFO,CAAlB;AAKA,SAAO;AAAEgB,IAAAA;AAAF,GAAP;AACD,CAlCD","sourcesContent":["interface TreeConfig {\n  getId?: (node: any) => any;\n  getChildren?: (node: any) => any[];\n  shouldFlattenCallback?: (node: any) => boolean;\n}\n\ninterface TreeArgs {\n  flattened: any[];\n}\n\ninterface TreeNode {\n  id?: any,\n  depth?: number,\n  parent?: any,\n}\n\nexport default (\n  source: any,\n  {\n    getId = (node) => node.id,\n    getChildren = (node) => node.children,\n    shouldFlattenCallback = (node: any) => node.children.length,\n  }: TreeConfig\n): TreeArgs => {\n  let depth = 0;\n\n  const toFinalNode = (\n    value: any,\n    { depth = 0, id = getId(value), parent = null }: TreeNode = {}\n  ) => {\n    return { id, depth, parent, value };\n  };\n\n  const reduce = (getChildren: any, node: any) => {\n    depth++;\n    return getChildren(node).reduce((accumulator: any, value: any): any[] => {\n      accumulator.push(toFinalNode(value, { depth, parent: node }));\n      if (shouldFlattenCallback(value)) {\n        accumulator = accumulator.concat(reduce(getChildren, value));\n      }\n      return accumulator;\n    }, []);\n  };\n\n  const flattened = [\n    toFinalNode(source),\n    ...reduce(getChildren, source),\n  ];\n\n  return { flattened };\n};\n"]},"metadata":{},"sourceType":"module"}