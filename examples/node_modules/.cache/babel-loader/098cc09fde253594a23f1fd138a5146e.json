{"ast":null,"code":"export default ((source, {\n  getId = node => node.id,\n  getChildren = node => node.children,\n  shouldFlattenCallback = node => node.children.length\n}) => {\n  let depth = 0;\n\n  const toFinalNode = ({\n    depth = 0,\n    id = 0,\n    parent = null,\n    value: any\n  }) => {\n    return {\n      id,\n      depth,\n      parent,\n      value\n    };\n  };\n\n  const reduce = (getChildren, node) => {\n    depth++;\n    return getChildren(node).reduce((accumulator, value) => {\n      accumulator.push({\n        id: getId(value),\n        depth,\n        parent: node,\n        value\n      });\n\n      if (shouldFlattenCallback(value)) {\n        accumulator = accumulator.concat(reduce(getChildren, value));\n      }\n\n      return accumulator;\n    }, []);\n  };\n\n  const flattened = [{\n    depth: 0,\n    parent: null,\n    value: source\n  }, ...reduce(getChildren, source)];\n  return {\n    flattened\n  };\n});","map":{"version":3,"sources":["/home/mitch/react-tree/src/hooks/useTree.ts"],"names":["source","getId","node","id","getChildren","children","shouldFlattenCallback","length","depth","toFinalNode","parent","value","any","reduce","accumulator","push","concat","flattened"],"mappings":"AAUA,gBAAe,CACbA,MADa,EAEb;AACEC,EAAAA,KAAK,GAAIC,IAAD,IAAUA,IAAI,CAACC,EADzB;AAEEC,EAAAA,WAAW,GAAIF,IAAD,IAAUA,IAAI,CAACG,QAF/B;AAGEC,EAAAA,qBAAqB,GAAIJ,IAAD,IAAeA,IAAI,CAACG,QAAL,CAAcE;AAHvD,CAFa,KAOA;AACb,MAAIC,KAAK,GAAG,CAAZ;;AAEA,QAAMC,WAAW,GAAG,CAAC;AAAED,IAAAA,KAAK,GAAG,CAAV;AAAaL,IAAAA,EAAE,GAAG,CAAlB;AAAqBO,IAAAA,MAAM,GAAG,IAA9B;AAAoCC,IAAAA,KAAK,EAAEC;AAA3C,GAAD,KAAsD;AACxE,WAAO;AAAET,MAAAA,EAAF;AAAMK,MAAAA,KAAN;AAAaE,MAAAA,MAAb;AAAqBC,MAAAA;AAArB,KAAP;AACD,GAFD;;AAIA,QAAME,MAAM,GAAG,CAACT,WAAD,EAAmBF,IAAnB,KAAiC;AAC9CM,IAAAA,KAAK;AACL,WAAOJ,WAAW,CAACF,IAAD,CAAX,CAAkBW,MAAlB,CAAyB,CAACC,WAAD,EAAmBH,KAAnB,KAAyC;AACvEG,MAAAA,WAAW,CAACC,IAAZ,CAAiB;AAAEZ,QAAAA,EAAE,EAAEF,KAAK,CAACU,KAAD,CAAX;AAAoBH,QAAAA,KAApB;AAA2BE,QAAAA,MAAM,EAAER,IAAnC;AAAyCS,QAAAA;AAAzC,OAAjB;;AACA,UAAIL,qBAAqB,CAACK,KAAD,CAAzB,EAAkC;AAChCG,QAAAA,WAAW,GAAGA,WAAW,CAACE,MAAZ,CAAmBH,MAAM,CAACT,WAAD,EAAcO,KAAd,CAAzB,CAAd;AACD;;AACD,aAAOG,WAAP;AACD,KANM,EAMJ,EANI,CAAP;AAOD,GATD;;AAWA,QAAMG,SAAS,GAAG,CAChB;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYE,IAAAA,MAAM,EAAE,IAApB;AAA0BC,IAAAA,KAAK,EAAEX;AAAjC,GADgB,EAEhB,GAAGa,MAAM,CAACT,WAAD,EAAcJ,MAAd,CAFO,CAAlB;AAKA,SAAO;AAAEiB,IAAAA;AAAF,GAAP;AACD,CA/BD","sourcesContent":["interface TreeConfig {\n  getId?: (node: any) => any;\n  getChildren?: (node: any) => any[];\n  shouldFlattenCallback?: (node: any) => boolean;\n}\n\ninterface TreeArgs {\n  flattened: any[];\n}\n\nexport default (\n  source: any,\n  {\n    getId = (node) => node.id,\n    getChildren = (node) => node.children,\n    shouldFlattenCallback = (node: any) => node.children.length,\n  }: TreeConfig\n): TreeArgs => {\n  let depth = 0;\n\n  const toFinalNode = ({ depth = 0, id = 0, parent = null, value: any }) => {\n    return { id, depth, parent, value };\n  };\n\n  const reduce = (getChildren: any, node: any) => {\n    depth++;\n    return getChildren(node).reduce((accumulator: any, value: any): any[] => {\n      accumulator.push({ id: getId(value), depth, parent: node, value });\n      if (shouldFlattenCallback(value)) {\n        accumulator = accumulator.concat(reduce(getChildren, value));\n      }\n      return accumulator;\n    }, []);\n  };\n\n  const flattened = [\n    { depth: 0, parent: null, value: source },\n    ...reduce(getChildren, source),\n  ];\n\n  return { flattened };\n};\n"]},"metadata":{},"sourceType":"module"}