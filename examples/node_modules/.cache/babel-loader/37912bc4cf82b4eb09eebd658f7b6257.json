{"ast":null,"code":"export default ((source, {\n  getChildren = node => node.children,\n  shouldFlattenCallback\n}) => {\n  let depth = 0;\n\n  const reduce = (getChildren, node, shouldFlattenCallback = node => node.children.length) => {\n    depth++;\n    return getChildren(node).reduce((accumulator, value) => {\n      accumulator.push({\n        depth,\n        parent: node,\n        value\n      });\n\n      if (shouldFlattenCallback(value)) {\n        accumulator = accumulator.concat(reduce(getChildren, value, shouldFlattenCallback));\n      }\n\n      return accumulator;\n    }, []);\n  };\n\n  const flattened = [{\n    depth: 0,\n    parent: null,\n    value: source\n  }, ...reduce(getChildren, source)];\n  return {\n    flattened\n  };\n});","map":{"version":3,"sources":["/home/mitch/react-tree/src/hooks/useTree.ts"],"names":["source","getChildren","node","children","shouldFlattenCallback","depth","reduce","length","accumulator","value","push","parent","concat","flattened"],"mappings":"AASA,gBAAe,CACbA,MADa,EAEb;AACEC,EAAAA,WAAW,GAAIC,IAAD,IAAUA,IAAI,CAACC,QAD/B;AAEEC,EAAAA;AAFF,CAFa,KAMA;AACb,MAAIC,KAAK,GAAG,CAAZ;;AAEA,QAAMC,MAAM,GAAG,CACbL,WADa,EAEbC,IAFa,EAGbE,qBAA6C,GAAIF,IAAD,IAAeA,IAAI,CAACC,QAAL,CAAcI,MAHhE,KAIV;AACHF,IAAAA,KAAK;AACL,WAAOJ,WAAW,CAACC,IAAD,CAAX,CAAkBI,MAAlB,CAAyB,CAACE,WAAD,EAAmBC,KAAnB,KAAyC;AACvED,MAAAA,WAAW,CAACE,IAAZ,CAAiB;AAAEL,QAAAA,KAAF;AAASM,QAAAA,MAAM,EAAET,IAAjB;AAAuBO,QAAAA;AAAvB,OAAjB;;AACA,UAAIL,qBAAqB,CAACK,KAAD,CAAzB,EAAkC;AAChCD,QAAAA,WAAW,GAAGA,WAAW,CAACI,MAAZ,CACZN,MAAM,CAACL,WAAD,EAAcQ,KAAd,EAAqBL,qBAArB,CADM,CAAd;AAGD;;AACD,aAAOI,WAAP;AACD,KARM,EAQJ,EARI,CAAP;AASD,GAfD;;AAiBA,QAAMK,SAAS,GAAG,CAChB;AAAER,IAAAA,KAAK,EAAE,CAAT;AAAYM,IAAAA,MAAM,EAAE,IAApB;AAA0BF,IAAAA,KAAK,EAAET;AAAjC,GADgB,EAEhB,GAAGM,MAAM,CAACL,WAAD,EAAcD,MAAd,CAFO,CAAlB;AAKA,SAAO;AAAEa,IAAAA;AAAF,GAAP;AACD,CAhCD","sourcesContent":["interface TreeConfig {\n  getChildren?: (node: any) => any[];\n  shouldFlattenCallback?: (node: any) => boolean;\n}\n\ninterface TreeArgs {\n  flattened: any[];\n}\n\nexport default (\n  source: any,\n  {\n    getChildren = (node) => node.children,\n    shouldFlattenCallback\n  }: TreeConfig\n): TreeArgs => {\n  let depth = 0;\n\n  const reduce = (\n    getChildren: any,\n    node: any,\n    shouldFlattenCallback: (node: any) => boolean = (node: any) => node.children.length\n  ) => {\n    depth++;\n    return getChildren(node).reduce((accumulator: any, value: any): any[] => {\n      accumulator.push({ depth, parent: node, value });\n      if (shouldFlattenCallback(value)) {\n        accumulator = accumulator.concat(\n          reduce(getChildren, value, shouldFlattenCallback)\n        );\n      }\n      return accumulator;\n    }, []);\n  };\n\n  const flattened = [\n    { depth: 0, parent: null, value: source },\n    ...reduce(getChildren, source),\n  ];\n\n  return { flattened };\n};\n"]},"metadata":{},"sourceType":"module"}